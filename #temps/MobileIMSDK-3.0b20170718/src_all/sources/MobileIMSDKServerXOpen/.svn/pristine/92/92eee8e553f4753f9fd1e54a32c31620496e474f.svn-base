/*
 * Copyright (C) 2017  即时通讯网(52im.net) & Jack Jiang.
 * The MobileIMSDK_X (MobileIMSDK v3.x) Project. 
 * All rights reserved.
 * 
 * > Github地址: https://github.com/JackJiang2011/MobileIMSDK
 * > 文档地址: http://www.52im.net/forum-89-1.html
 * > 即时通讯技术社区：http://www.52im.net/
 * > 即时通讯技术交流群：320837163 (http://www.52im.net/topic-qqgroup.html)
 *  
 * "即时通讯网(52im.net) - 即时通讯开发者社区!" 推荐开源工程。
 * 
 * GlobalSendHelper.java at 2017-5-2 15:49:28, code by Jack Jiang.
 * You can contact author with jack.jiang@52im.net or jb2011@163.com.
 */
package net.openmob.mobileimsdk.server.utils;

import org.apache.mina.core.session.IoSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import net.nettime.mobileimsdk.server.bridge.QoS4ReciveDaemonC2B;
import net.openmob.mobileimsdk.server.ServerCoreHandler;
import net.openmob.mobileimsdk.server.ServerLauncher;
import net.openmob.mobileimsdk.server.processor.BridgeProcessor;
import net.openmob.mobileimsdk.server.processor.OnlineProcessor;
import net.openmob.mobileimsdk.server.protocal.Protocal;

/**
 * 本类提供的是公开的数据发送方法（已封装跨机器通信的桥接处理逻辑）。
 * 
 * @author Jack Jiang, 2016-11-30
 * @version 1.0
 */
public class GlobalSendHelper
{
	private static Logger logger = LoggerFactory.getLogger(ServerCoreHandler.class);  

	/**
	 * 用方法用于服务端作为中转发送C2C类型的数据之用，此方法封装了服务端中转发送
	 * C2C消息的所有逻辑（包括当接收者不在本机在线列表时的桥接处理等）。
	 * <p>
	 * <b>注意：</b>本方法不应由服务端的应用层调用，仅限MobileIMSDK_X框架内部使用。
	 * 
	 * @param bridgeProcessor
	 * @param session 应答包被回复的回话，也就是C2C消息的发出者对应的session句柄（布满是消息接收者哦）
	 * @param pFromClient
	 * @param remoteAddress
	 * @param serverCoreHandler
	 * @throws Exception
	 * @see BridgeProcessor#publish(String)
	 * @see LocalSendHelper#sendData(IoSession, Protocal)
	 */
	public static void sendDataC2C(BridgeProcessor bridgeProcessor
			, IoSession session, Protocal pFromClient, String remoteAddress
			, ServerCoreHandler serverCoreHandler) throws Exception
	{
		// TODO just for DEBUG
		OnlineProcessor.getInstance().__printOnline();

		// ** 是否需要发送（给客户端）伪应答包（因为不是真正的接收者应答，所以叫伪应答）
		// 发送伪应答的目的是保证在消息被离线处理或者桥接发送时，也能让发送者知道消息
		// 已被妥善送达（离线或桥接发送也同样是”送达“，只是非实时而已）
		boolean needDelegateACK = false;

		// ** 【已启用与Web端的互通 且 本机不在线的情况下 就尝试转为桥接发送】
		// TODO 第二阶段集群实现时要修改以下在线状态判断为全局所有用户在线列表中的结果（而不只是本机）
		// 接收方不在本地MessageServer在线列表上（按照第一阶段的异构通信算法，直接发往Web服务端）
		if(ServerLauncher.bridgeEnabled && !OnlineProcessor.isOnline(pFromClient.getTo()))
		{
			logger.debug("[IMCORE<C2C>-桥接↑]>> 客户端"+pFromClient.getTo()+"不在线，数据[from:"+pFromClient.getFrom()
					+",fp:"+pFromClient.getFp()+"to:"+pFromClient.getTo()+",content:"+pFromClient.getDataContent()
					+"] 将通过MQ直发Web服务端（彼时在线则通过web实时发送、否则通过Web端进"
					+"行离线存储）【第一阶段APP+WEB跨机通信算法】！");

			// 如果此包需要QoS 且 之前已经成功被”收到“，则本次就不需要额外处理，
			// 只需再次发送伪应答，客户端重复发送的原因可能是因为之前的应答包丢包
			if(pFromClient.isQoS()
					&& QoS4ReciveDaemonC2B.getInstance().hasRecieved(pFromClient.getFp()))
			{
				needDelegateACK = true;
			}
			else
			{
				// 直发MQ队列（将会由队列那端的Web服务器进行接管和处理）
				boolean toMQ = bridgeProcessor.publish(pFromClient.toGsonString());

				// 消息已成功桥接发送
				if(toMQ)
				{
					logger.debug("[IMCORE<C2C>-桥接↑]>> 客户端"+remoteAddress+"的数据已跨机器送出成功【OK】。(数据[from:"+pFromClient.getFrom()
							+",fp:"+pFromClient.getFp()+",to:"+pFromClient.getTo()+",content:"+pFromClient.getDataContent()
							+"]【第一阶段APP+WEB跨机通信算法】)");

					// 注：此回调不需要吧，在MQ那端的服务器会在发送成功后进行C2C成功回调的（此处再搞就重复了）
					// // 通知回调
					// serverEventListener.onTransBuffer_C2C_CallBack(
					//     pFromClient.getTo(), pFromClient.getFrom(), pFromClient.getDataContent());

					// 【如果该消息包有QoS机制】则将由则服务端代为发送一条伪应答包，因已桥接发送成功
					if(pFromClient.isQoS())
						needDelegateACK = true;
				}
				// 未成功桥接发送
				else
				{
					logger.debug("[IMCORE<C2C>-桥接↑]>> 客户端"+remoteAddress+"的数据已跨机器送出失败，将作离线处理了【NO】。(数据[from:"+pFromClient.getFrom()
							+",fp:"+pFromClient.getFp()+"to:"+pFromClient.getTo()+",content:"+pFromClient.getDataContent()
							+"]【第一阶段APP+WEB跨机通信算法】)");

					//** MQ也发送失败：那就意味着接收发不在本机也不能成功发往MQ，直接离线处理吧
					//*********************** 代码段20160914【1】：与【2】处是一样的，未重用代码的目的是简化代码逻辑
					// 提交回调，由上层应用进行离线处理
					boolean offlineProcessedOK = serverCoreHandler.getServerEventListener()
							.onTransBuffer_C2C_RealTimeSendFaild_CallBack(pFromClient.getTo()
									, pFromClient.getFrom(), pFromClient.getDataContent(), pFromClient.getFp(), pFromClient.getTypeu());

					// 【如果该消息包有QoS机制 且 上层应用成功进行了离线处理】则将由则服务端代为发送一条伪应
					// 答包（伪应答仅意味着不是接收方的实时应答，而只是存储到离线DB中，但在发送方看来也算
					// 是被对方收到，只是延迟收到而已（离线消息嘛））），在有QoS机制但应用层没有处理的情况
					// 下发送方客户端在QoS重传机制超时后将报出消息发送失败的提示
					if(pFromClient.isQoS() && offlineProcessedOK)
					{
						// 离线处理成功，也当然发给发送方一个ACK了，对于
						// 发送方而言，离线处理也是成功送达
						needDelegateACK = true;
					}
					else
					{
						logger.warn("[IMCORE<C2C>-桥接↑]>> 客户端"+remoteAddress+"的通用数据传输消息尝试实时发送没有成功，但上层应用层没有成" +
								"功(或者完全没有)进行离线存储，此消息将被服务端丢弃【第一阶段APP+WEB跨机通信算法】！");
					}
				}
			}

			if(needDelegateACK)
			{
				// 发送伪应答包，以便发送消息者（它自已其实不知道这条消息是被桥接处理的）知道已经送达
				boolean receivedBackSendSucess = LocalSendHelper.replyDelegateRecievedBack(session, pFromClient);
				if(receivedBackSendSucess)
					logger.debug("[IMCORE<C2C>-桥接↑]【QoS_伪应答_C2S】向"+pFromClient.getFrom()+"发送"+pFromClient.getFp()
							+"的伪应答包成功,伪装from自："+pFromClient.getTo()+"【第一阶段APP+WEB跨机通信算法】.");
			}

			// 【【C2S[桥接]模式下的QoS机制2/4步：将收到的包存入QoS接收方暂存队列中（用于防QoS消息重复）】】
			// @see 客户端LocalUDPDataReciever中的第1/4和第4/4步相关处理
			QoS4ReciveDaemonC2B.getInstance().addRecieved(pFromClient);
		}
		// ** 【本机在线或其它情况下则直接在本机范围内发送和处理】
		// 接收方在本MessageServer的在线列表中
		else
		{
			boolean sendOK = LocalSendHelper.sendData(pFromClient);
			// 数据已成功发出（给对方用户）（注意：UDP协议下如果客户端没有丢包保证机机制，服务端代发的数据不意味着用户一定能收的到哦！）
			if(sendOK)
			{
				serverCoreHandler.getServerEventListener().onTransBuffer_C2C_CallBack(
						pFromClient.getTo(), pFromClient.getFrom()
						, pFromClient.getDataContent(), pFromClient.getFp(), pFromClient.getTypeu());
			}
			else
			{
				logger.info("[IMCORE<C2C>]>> 客户端"+remoteAddress+"的通用数据尝试实时发送没有成功，将交给应用层进行离线存储哦...");

				//*********************** 代码段20160914【2】：与【1】处是一样的，未重用代码的目的是简化代码逻辑
				// 提交回调，由上层应用进行离线处理
				boolean offlineProcessedOK = serverCoreHandler.getServerEventListener()
						.onTransBuffer_C2C_RealTimeSendFaild_CallBack(pFromClient.getTo()
								, pFromClient.getFrom(), pFromClient.getDataContent(), pFromClient.getFp(), pFromClient.getTypeu());
				// 【如果该消息包有QoS机制 且 上层应用成功进行了离线处理】则将由则服务端代为发送一条伪应
				// 答包（伪应答仅意味着不是接收方的实时应答，而只是存储到离线DB中，但在发送方看来也算
				// 是被对方收到，只是延迟收到而已（离线消息嘛））），在有QoS机制但应用层没有处理的情况
				// 下发送方客户端在QoS重传机制超时后将报出消息发送失败的提示
				if(pFromClient.isQoS() && offlineProcessedOK)
				{
					// 发送伪应答包
					boolean receivedBackSendSucess = LocalSendHelper.replyDelegateRecievedBack(session, pFromClient);
					if(receivedBackSendSucess)
						logger.debug("[IMCORE<C2C>]【QoS_伪应答_C2S】向"+pFromClient.getFrom()+"发送"+pFromClient.getFp()
								+"的伪应答包成功,from="+pFromClient.getTo()+".");
				}
				else
				{
					logger.warn("[IMCORE<C2C>]>> 客户端"+remoteAddress+"的通用数据传输消息尝试实时发送没有成功，但上层应用层没有成" +
							"功(或者完全没有)进行离线存储，此消息将被服务端丢弃！");
				}
			}
		}
	}
	
	/**
	 * 用方法用于服务端向客户端主动发起的数据之用，此方法封装了服务端发送
	 * S2C消息的所有逻辑（包括当接收者不在本机在线列表时的桥接处理等）。
	 * <p>
	 * <b>提示：</b>本方法可用于应用层调用，从而实现服务端向客户端主动发送
	 * 消息的能力（且支持跨机器的消息能力）。
	 * 
	 * @param bridgeProcessor
	 * @param session
	 * @param pFromClient
	 * @return false表示发送一定没有成功，true表示消息已成功送成但因异步发
	 * 送且是UDP的原因能否成功收到还得看服务端QoS的情况
	 * @throws Exception
	 * @see BridgeProcessor#publish(String)
	 * @see LocalSendHelper#sendData(IoSession, Protocal)
	 */
	public static boolean sendDataS2C(BridgeProcessor bridgeProcessor, Protocal pFromClient) throws Exception
	{
		// TODO just for DEBUG
		OnlineProcessor.getInstance().__printOnline();
		
		boolean sucess = false;

		// ** 【本机不在线就尝试转为桥接发送】
		// TODO 第二阶段集群实现时要修改以下在线状态判断为全局所有用户在线列表中的结果（而不只是本机）
		// 接收方不在本地MessageServer在线列表上（按照第一阶段的异构通信算法，直接发往Web服务端）
		if(!OnlineProcessor.isOnline(pFromClient.getTo()))
		{
			logger.debug("[IMCORE<S2C>-桥接↑]>> 客户端"+pFromClient.getTo()+"不在线，数据[from:"+pFromClient.getFrom()
					+",fp:"+pFromClient.getFp()+"to:"+pFromClient.getTo()+",content:"+pFromClient.getDataContent()
					+"] 将通过MQ直发Web服务端（彼时在线则通过web实时发送、否则通过Web端进"
					+"行离线存储）【第一阶段APP+WEB跨机通信算法】！");

				// 直发MQ队列（将会由队列那端的Web服务器进行接管和处理）
				boolean toMQ = bridgeProcessor.publish(pFromClient.toGsonString());
				// 消息已成功桥接发送
				if(toMQ)
				{
					logger.debug("[IMCORE<S2C>-桥接↑]>> 服务端的数据已跨机器送出成功【OK】。(数据[from:"+pFromClient.getFrom()
							+",fp:"+pFromClient.getFp()+",to:"+pFromClient.getTo()+",content:"+pFromClient.getDataContent()
							+"]【第一阶段APP+WEB跨机通信算法】)");
					sucess = true;
				}
				// 未成功桥接发送
				else
				{
					logger.error("[IMCORE<S2C>-桥接↑]>> 服务端的数据已跨机器送出失败，请通知管理员检查MQ中间件是否正常工作【NO】。(数据[from:"+pFromClient.getFrom()
							+",fp:"+pFromClient.getFp()+"to:"+pFromClient.getTo()+",content:"+pFromClient.getDataContent()
							+"]【第一阶段APP+WEB跨机通信算法】)");

					//** MQ发送失败：那就意味着接收发不在本机也不能成功发往MQ，本次发送送结果直接就是false了
				}
		}
		// ** 【本机在线则直接发送】
		// 接收方在本MessageServer的在线列表中
		else
		{
			boolean sendOK = LocalSendHelper.sendData(pFromClient);
			// 数据已成功发出（给对方用户）（注意：UDP协议下如果客户端没有丢包保证机机制，服务端代发的数据不意味着用户一定能收的到哦！）
			if(sendOK)
				sucess = true;
			else
				logger.warn("[IMCORE]>> 服务端的通用数据传输消息尝试实时发送没有成功，但上层应用层没有成" +
							"功，请应用层自行决定此条消息的发送【NO】！");
		}
		
		return sucess;
	}
}
