/*
 * Copyright (C) 2017  即时通讯网(52im.net) & Jack Jiang.
 * The MobileIMSDK_X (MobileIMSDK v3.x) Project. 
 * All rights reserved.
 * 
 * > Github地址: https://github.com/JackJiang2011/MobileIMSDK
 * > 文档地址: http://www.52im.net/forum-89-1.html
 * > 即时通讯技术社区：http://www.52im.net/
 * > 即时通讯技术交流群：320837163 (http://www.52im.net/topic-qqgroup.html)
 *  
 * "即时通讯网(52im.net) - 即时通讯开发者社区!" 推荐开源工程。
 * 
 * ServerCoreHandler.java at 2017-5-2 15:49:27, code by Jack Jiang.
 * You can contact author with jack.jiang@52im.net or jb2011@163.com.
 */
package net.openmob.mobileimsdk.server;

import java.nio.ByteBuffer;

import net.openmob.mobileimsdk.server.event.MessageQoSEventListenerS2C;
import net.openmob.mobileimsdk.server.event.ServerEventListener;
import net.openmob.mobileimsdk.server.processor.BridgeProcessor;
import net.openmob.mobileimsdk.server.processor.LogicProcessor;
import net.openmob.mobileimsdk.server.processor.OnlineProcessor;
import net.openmob.mobileimsdk.server.protocal.Protocal;
import net.openmob.mobileimsdk.server.protocal.ProtocalType;
import net.openmob.mobileimsdk.server.utils.LocalSendHelper;
import net.openmob.mobileimsdk.server.utils.ServerToolKits;

import org.apache.mina.core.buffer.IoBuffer;
import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.session.IoSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * MobileIMSDK的MINA IoHandler实现类。
 * <p>
 * 本类是MobileIMSDK的服务端网络调度算法核心所在，其性能将决定整个
 * 即时通讯架构的数据交换性能、负载能力、吞吐效率等。
 * 
 * @author Jack Jiang, 2013-10-03
 * @version 1.0
 */
public class ServerCoreHandler extends IoHandlerAdapter 
{
	private static Logger logger = LoggerFactory.getLogger(ServerCoreHandler.class);  
	
	/** 服务端事件回调实现 */
	protected ServerEventListener serverEventListener = null;
	/** QoS机制下的S2C模式中，由服务端主动发起消息的QoS事件回调实现 */
	protected MessageQoSEventListenerS2C serverMessageQoSEventListener = null;
	/** IM消息逻辑处理器（真正的算法实现都在此类中处理） */
	protected LogicProcessor logicProcessor = null;
	/** 跨机器通信中间件服务提供者 */
	protected BridgeProcessor bridgeProcessor = null;
	
    public ServerCoreHandler()
    {
    	logicProcessor = this.createLogicProcessor();
    	
    	// 需要与Web版互通
    	if(ServerLauncher.bridgeEnabled)
    		bridgeProcessor = this.createBridgeProcessor();
    }
    
    protected LogicProcessor createLogicProcessor()
    {
    	return new LogicProcessor(this);
    }
    
    /**
     * 启动跨机器通信消息中间件服务提供者。
     * 
     * @since 3.0
     */
    protected BridgeProcessor createBridgeProcessor()
    {
    	BridgeProcessor bp = new BridgeProcessor(){
			protected void realtimeC2CSuccessCallback(Protocal p){
				serverEventListener.onTransBuffer_C2C_CallBack(
						p.getTo(), p.getFrom(), p.getDataContent(), p.getFp(), p.getTypeu());
			}

			@Override
			protected boolean offlineC2CProcessCallback(Protocal p){
				return serverEventListener.onTransBuffer_C2C_RealTimeSendFaild_CallBack(
						p.getTo(), p.getFrom(), p.getDataContent(), p.getFp(), p.getTypeu());
			}
    	};
//    	// 必须start
//		bp.start();
    	return bp;
    }
    
    /**
     * 单独的方法启动跨服务器桥接处于器，防止出现交叉引用而发生不可预知的错误。
     */
    public void lazyStartupBridgeProcessor()
    {
    	if(ServerLauncher.bridgeEnabled && bridgeProcessor != null)
    	{
    		// 必须start
    		bridgeProcessor.start();
    	}
    }

    /**
     * MINA的异常回调方法。
     * <p>
     * 本类中将在异常发生时，立即close当前会话。
     * 
     * @param session 发生异常的会话
     * @param cause 异常内容
     * @see IoSession#close(boolean)
     */
    @Override
    public void exceptionCaught(IoSession session, Throwable cause) throws Exception 
    {
        logger.error("[IMCORE]exceptionCaught捕获到错了，原因是："+cause.getMessage(), cause);
        session.close(true);
    }

    /**
     * MINA框架中收到客户端消息的回调方法。
     * <p>
     * 本类将在此方法中实现完整的即时通讯数据交互和处理策略。
     * <p>
     * 为了提升并发性能，本方法将运行在独立于MINA的IoProcessor之外的线程池中，
     * 详见 {@link ServerLauncher#initAcceptor()}中的MINA设置代码 。
     * 
     * @param session 收到消息对应的会话引用
     * @param message 收到的MINA的原始消息封装对象，本类中是 {@link IoBuffer}对象
     * @throws Exception 当有错误发生时将抛出异常
     */
    @Override
    public void messageReceived(IoSession session, Object message)
            throws Exception 
    {
    	if (message instanceof IoBuffer) 
    	{
            IoBuffer buffer = (IoBuffer) message;
            Protocal pFromClient = ServerToolKits.fromIOBuffer(buffer);
            
            String remoteAddress = ServerToolKits.clientInfoToString(session);
//            System.out.println("---------------------------------------------------------");
//            logger.debug(">> 收到的客户端"+remoteAddress+"的消息:::"+pFromClient.toGsonString());
            
            switch(pFromClient.getType())
            {
	            // 【MobileIMSDK框架层协议：客户端与客户端、客户端与服务端之间的ACK应答包】
	        	case ProtocalType.C.FROM_CLIENT_TYPE_OF_RECIVED:
	        	{
	        		logger.info("[IMCORE]>> 收到客户端"+remoteAddress+"的ACK应答包发送请求.");
	        			
	        		if(!OnlineProcessor.isLogined(session))
	        		{
	        			LocalSendHelper.replyDataForUnlogined(session, pFromClient);
	        			return;
	        		}

	        		logicProcessor.processACK(pFromClient, remoteAddress);
	        		break;
	        	}
	        	// 【MobileIMSDK框架层协议：用户通用数据转发请求】
	        	case ProtocalType.C.FROM_CLIENT_TYPE_OF_COMMON$DATA:
	        	{
	        		logger.info("[IMCORE]>> 收到客户端"+remoteAddress+"的通用数据发送请求.");
	        		
	        		// 开始回调
	        		if(serverEventListener != null)
	        		{
	        			if(!OnlineProcessor.isLogined(session))
	        			{
	        				LocalSendHelper.replyDataForUnlogined(session, pFromClient);
	        				return;
	        			}
	        			
	        			// 【C2S数据】客户端发给服务端的消息
	        			if("0".equals(pFromClient.getTo()))
	        				logicProcessor.processC2SMessage(session, pFromClient, remoteAddress);
	        			// 【C2C数据】客户端发给客户端的消息
	        			else
	        				logicProcessor.processC2CMessage(bridgeProcessor, session
	        						, pFromClient, remoteAddress);
	        		}
	        		else
	        		{
	        			logger.warn("[IMCORE]>> 收到客户端"+remoteAddress+"的通用数据传输消息，但回调对象是null，回调无法继续.");
	        		}
	        		break;
	        	}
	        	// 【MobileIMSDK框架层协议：用户KeepAlive心跳包】
	        	case ProtocalType.C.FROM_CLIENT_TYPE_OF_KEEP$ALIVE:
	        	{
//	        		logger.debug("[IMCORE]>> 【1收心跳"+UserProcessor.getLoginNameFromSession(session)
//						+"】收到客户端"+remoteAddress+"的心跳包.");
	        		if(!OnlineProcessor.isLogined(session))
	        		{
	        			LocalSendHelper.replyDataForUnlogined(session, pFromClient);
	        			return;
	        		}
	        		else
	        			logicProcessor.processKeepAlive(session, pFromClient, remoteAddress);
	        		
	        		break;
	        	}
            	// 【MobileIMSDK框架层协议：用户登陆/连接IM服务器的请求】
            	case ProtocalType.C.FROM_CLIENT_TYPE_OF_LOGIN:
            	{
            		logicProcessor.processLogin(session, pFromClient, remoteAddress);
            		break;
            	}
            	// 【MobileIMSDK框架层协议：用户注销与IM服务器的连接】
            	// 目前的逻辑是：用户退出登陆时不需要反馈给客户端
            	case ProtocalType.C.FROM_CLIENT_TYPE_OF_LOGOUT:
            	{
            		logger.info("[IMCORE]>> 收到客户端"+remoteAddress+"的退出登陆请求.");
            		// 立即注销用户会话
            		session.close(true);
            		break;
            	}
            	// 【MobileIMSDK框架层协议：收到客户端发过来的ECHO指令（目前回显指令仅用于C2S时开发人员的网络测试，别无他用】
	        	case ProtocalType.C.FROM_CLIENT_TYPE_OF_ECHO:
	        		pFromClient.setType(ProtocalType.S.FROM_SERVER_TYPE_OF_RESPONSE$ECHO);
	        		// 将客户端发过来的Protocal包原样返回（谓之ECHO哦）
	        		LocalSendHelper.sendData(session, pFromClient);
	        		break;
            	default:
            		logger.warn("[IMCORE]【注意】收到的客户端"+remoteAddress+"消息类型："+pFromClient.getType()+"，但目前该类型服务端不支持解析和处理！");
            		break;
            }
        }
    	else
    	{
    		logger.error("[IMCORE]【注意】收到了未知数据类型的用户消息(messageReceived), message.class="+message.getClass()
        			+ ", IoBuffer?"+(message instanceof IoBuffer)
        			+ ", ByteBuffer?"+(message instanceof ByteBuffer));
    	}
    }
    
    /**
     * MINA框架中，当用户会话被关闭时将调本本方法。
     * <p>
     * 本方法中会将此用户从在线列表及相关队列中移除，将通过回调通知上层代码（由
     * 上层代码接力实现自定义的其它业务处理）。
     * <p>
     * <b>会话被关闭的可能性有3种：</b>
     * <ul>
     * <li>当客户端显式地退出网络连接时（即正常退出时）；</li>
     * <li>客户端非正常关闭，但服务端的会话超时到来时；</li>
     * <li>与客户端的会话发生其它错误或异常时。</li>
     * </ul>
     * 
     * @param session 被关闭的会话引用
     * @throws Exception 任何错误发生时将抛出本异常
     * @see OnlineProcessor#removeUser(int)
     * @see ServerEventListener#onUserLogoutAction_CallBack(int, Object)
     */
    @Override
    public void sessionClosed(IoSession session) throws Exception 
    {
    	String user_id = OnlineProcessor.getUserIdFromSession(session);
    	logger.info("[IMCORE]与"+ServerToolKits.clientInfoToString(session)+"的会话关闭(user_id="+user_id+")了...");
    	if(user_id != null)
    	{
    		// 从在线列表中移除
    		// 【理论上：】因为每个session只在用户登陆成功后才会放入列表中，那么每
    		//         一个存放在在线列表中的session肯定都对应了user_id。所以
    		//		    此处先取出session中之前存放的id再把这个session从在线列表中删除
    		//        的算法是可以保证session被关闭的同时肯定能同步将它从在线列表中移除，
    		//        从而保证在列表的准确性！
    		OnlineProcessor.getInstance().removeUser(user_id);
    		
    		// 开始回调
    		if(serverEventListener != null)
    			// 通知回调：用户退出登陆了
    			serverEventListener.onUserLogoutAction_CallBack(user_id, null, session);
    		else
    			logger.debug("[IMCORE]>> 客户端"+ServerToolKits.clientInfoToString(session)+"的会话被系统close了，但回调对象是null，没有进行回调.");
    	}
    	else
    	{
    		logger.warn("[IMCORE]【注意】客户端"+ServerToolKits.clientInfoToString(session)+"的会话被系统close了，但它里面没有存放user_id，这个会话是何时建立的？");
    	}
    }

    // 据文章资料，sessionCreated方法中应尽量快速的处理完需要处理的事情，它
    // 与sessionOpened所对应的并发处理机制不一样
    /**
     * 当与客户的会话建立时本方法回调用。
     * <p>
     * 默认情况下，本方法什么也没做。
     * 
     * @param session 建立的会话对象引用
     */
    @Override
    public void sessionCreated(IoSession session) throws Exception 
    {
    	logger.info("[IMCORE]与"+ServerToolKits.clientInfoToString(session)+"的会话建立(sessionCreated)了...");
    }

    /**
	 * 当与客户的会话被打开时本方法回调用。
	 * <p>
	 * 默认情况下，本方法什么也没做。
	 * 
	 * @param session 建立的会话对象引用
	 */
	@Override
	public void sessionOpened(IoSession session) throws Exception 
	{
		logger.info("[IMCORE]与"+ServerToolKits.clientInfoToString(session)+"的会话(sessionOpened)打开了...");
	}

	// 根据官方说明，UDP通信中本方法不会被调用，也没什么真正意义
    /**
     * 当与客户的会话空闲时本方法回调用。
     * <p>
     * 默认情况下，本方法什么也没做。
     * 
     * @param session 建立的会话对象引用
     */
    @Override
    public void sessionIdle(IoSession session, IdleStatus status) throws Exception 
    {
    	logger.info("[IMCORE]Session idle...");
    }

    public ServerEventListener getServerEventListener()
	{
		return serverEventListener;
	}
	void setServerEventListener(ServerEventListener serverEventListener)
	{
		this.serverEventListener = serverEventListener;
	}
	
	public MessageQoSEventListenerS2C getServerMessageQoSEventListener()
	{
		return serverMessageQoSEventListener;
	}

	void setServerMessageQoSEventListener(MessageQoSEventListenerS2C serverMessageQoSEventListener)
	{
		this.serverMessageQoSEventListener = serverMessageQoSEventListener;
	}

	public BridgeProcessor getBridgeProcessor()
	{
		return bridgeProcessor;
	}
}
